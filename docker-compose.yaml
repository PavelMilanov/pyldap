version: '3.9'

services:
  backend:
    build:
      context: ./backend/backend
    container_name: fastapi
    command: ["server"]
    restart: always
    env_file:
      - ./.config.env
    depends_on:
      - postgres
      - redis
    volumes:
      - server_logs:/server/logs
      - acts:/server/files/acts
    healthcheck:
      test: curl --fail http://localhost:8000/check || exit 1
      interval: 60s
      timeout: 5s
      retries: 5
    networks:
      - application
    
  background:
    build:
      context: ./backend/backend
    container_name: dramatiq
    command: ["background"]
    restart: always
    env_file:
      - ./.config.env
    depends_on:
      - redis
    networks:
      - application

  netserver:
    build:
      context: ./netserver
      args:
        - backend=backend
    container_name: netserver
    restart: always
    ports:
      - 8030:8030
    healthcheck:
      test: ./netserver ping || exit 1
      interval: 60s
      timeout: 5s
      retries: 5
    networks:
      - application

  frontend:
    build:
      context: ./web
      args:
        - listen_ip=0.0.0.0
        - listen_domain=local
        - version=v0.0.0
    container_name: nginx
    restart: always
    depends_on:
      - backend
    volumes:
      - acts:/files/acts
    healthcheck:
      test: curl --fail http://localhost || exit 1
      interval: 90s
      timeout: 5s
      retries: 5
    ports:
      - 80:80
    networks:
      - application

  postgres:
    image: postgres:14
    container_name: postgres
    restart: always
    env_file:
      - ./.config.env
    volumes:
      - db:/var/lib/postgresql/data/
    healthcheck:
      test: pg_isready -U $POSTGRES_USER -d $POSTGRES_DB || exit 1
      interval: 90s
      timeout: 5s
      retries: 3
    networks:
      - application

  dbadmin:
    image: dpage/pgadmin4:latest
    container_name: dbadmin
    restart: always
    env_file:
      - ./.config.env
    environment:
      PGADMIN_LISTEN_PORT: 8080
    networks:
      - application

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    restart: always
    volumes:
      - cache:/data
    healthcheck:
      test: redis-cli ping | grep PONG || exit 1
      interval: 90s
      timeout: 5s
      retries: 3
    networks:
      - application

networks:
  application:

volumes:
  cache:
  db:
  server_logs:
  acts:
